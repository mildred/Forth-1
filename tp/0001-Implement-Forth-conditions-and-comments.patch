From d9f39247ec3843041fb2140dbde6c75632ebde02 Mon Sep 17 00:00:00 2001
From: Shanti Bouchez <shanti@sogilis.com>
Date: Fri, 21 Oct 2011 15:33:54 +0200
Subject: [PATCH 1/3] Implement Forth conditions and comments

Conditions and comments works by overriding the execution loop.

Comments override the execution loop starting on ( and until ) where
they restore the original loop.

Conditions override the execution loop on IF. At that point the top
element is popped and if it is true, the execution continues normally
until ELSE and then execution skip to after THEN. If the element is
false, execution is skipped until ELSE and THEN finishes the condition.

Code example are as follows:

    ( This is a comment )
    ( Don't forget the space after the brace )
    ( And this is a condition )
    1 < 2 IF TRUE_CONDITION ELSE FALSE_CONDITION THEN

The only problem is that we haven't implemented comparison operators.
That's why the tests fails.
---
 features/comments.feature   |    9 ++++++++
 features/conditions.feature |   13 +++++++++++
 lua/forth                   |   51 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 73 insertions(+)
 create mode 100644 features/comments.feature
 create mode 100644 features/conditions.feature

diff --git a/features/comments.feature b/features/comments.feature
new file mode 100644
index 0000000..6d40109
--- /dev/null
+++ b/features/comments.feature
@@ -0,0 +1,9 @@
+Feature: The Forth interpreter shall understand comments
+
+  Background:
+    Given a forth interpreter
+
+  Scenario: Comment in an addition
+     When I execute "3 ( 6 ) 5 + ."
+     Then I should get "8 ok"
+
diff --git a/features/conditions.feature b/features/conditions.feature
new file mode 100644
index 0000000..ef3f504
--- /dev/null
+++ b/features/conditions.feature
@@ -0,0 +1,13 @@
+Feature: The Forth interpreter shall understand IF constructions
+
+  Background:
+    Given a forth interpreter
+
+  Scenario: If True
+     When I execute "3 5 < IF 1 . ELSE 2 . THEN 3 ."
+     Then I should get "1 3 ok"
+
+  Scenario: If False
+     When I execute "6 5 < IF 1 . ELSE 2 . THEN 3 ."
+     Then I should get "2 3 ok"
+
diff --git a/lua/forth b/lua/forth
index ec88caf..3c32148 100755
--- a/lua/forth
+++ b/lua/forth
@@ -23,6 +23,9 @@ local push, pop, dispatch, main_loop
 -- dispatch(...) --> procédure appelée pour dispatcher les symboles lus
 -- main_loop()   --> exécute la boucle principale
 
+local make_dispatch_execute_until
+local make_dispatch_skip_until
+
 --
 --  Implémantation des fonctions de base de Forth
 -----------------------------------------------------
@@ -36,6 +39,23 @@ symbol_table['.'] = function(...)
   io.write(tostring(pop()), " ")
 end
 
+-- Comment
+symbol_table['('] = function(original_dispatcher)
+  return make_dispatch_skip_until(")", original_dispatcher)
+end
+
+symbol_table.IF = function(original_dispatcher)
+  if pop() then
+    return make_dispatch_execute_until(original_dispatcher, "ELSE",
+      make_dispatch_skip_until("THEN",
+        original_dispatcher))
+  else
+    return make_dispatch_skip_until("ELSE",
+      make_dispatch_execute_until(original_dispatcher, "THEN",
+        original_dispatcher))
+  end
+end
+
 --
 --  Dispatch
 ----------------
@@ -61,6 +81,37 @@ function dispatch(disp, word)
   end
 end
 
+function dispatch_list(disp, list)
+  for i = 1, #list do
+    local res = disp(disp, list[i])
+    if res ~= nil then
+      disp = res
+    end
+  end
+end
+
+--
+--  Dispatcher Factories
+----------------------------
+
+function make_dispatch_execute_until(original_dispatcher, until_word, after_dispatcher)
+  return function(disp, word)
+    if word == until_word then
+      return after_dispatcher
+    else
+      return original_dispatcher(disp, word)
+    end
+  end
+end
+
+function make_dispatch_skip_until(until_word, after_dispatcher)
+  return function(disp, word)
+    if word == until_word then
+      return after_dispatcher
+    end
+  end
+end
+
 --
 --  Boucle principale
 -------------------------
-- 
1.7.10.2

